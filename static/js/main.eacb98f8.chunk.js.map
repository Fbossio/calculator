{"version":3,"sources":["components/Button/Button.module.css","components/Display/Display.module.css","components/ClearButton/ClearButton.module.css","components/Display/Display.jsx","components/Button/Button.jsx","components/ClearButton/ClearButton.jsx","components/Calculator/Calculator.jsx","components/App/App.js","serviceWorker.js","index.js","components/Calculator/Calculator.module.css"],"names":["module","exports","Display","value","className","classes","display","numbers","Button","this","props","onInput","buttonStyle","isNaN","btn","oper","onClick","Component","ClearButton","onClear","clear","Calculator","state","currentNumber","decimalFlag","operatorFlag","returned","handleInput","e","setState","handleReturn","String","math","error","handleZero","handleDecimal","handleOperator","newNumber","slice","length","handleClear","container","rowContainer","row","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.eacb98f8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__3xaJM\",\"oper\":\"Button_oper__1UcJr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__2n21m\",\"numbers\":\"Display_numbers__1DW0C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"clear\":\"ClearButton_clear__1yLqI\"};","import React from \"react\";\nimport classes from \"./Display.module.css\";\n\nconst Display = ({ value }) => {\n  return (\n    <div className={classes.display}>\n      <p className={classes.numbers}>{value}</p>\n    </div>\n  );\n};\n\nexport default Display;\n","import React, { Component } from \"react\";\nimport classes from \"./Button.module.css\";\n\nclass Button extends Component {\n  render() {\n    const { value, onInput } = this.props;\n    let buttonStyle =\n      isNaN(value) && value !== \".\"\n        ? `${classes.btn} ${classes.oper}`\n        : `${classes.btn}`;\n\n    return (\n      <button className={buttonStyle} onClick={onInput}>\n        {value}\n      </button>\n    );\n  }\n}\n\nexport default Button;\n","import React from \"react\";\nimport classes from \"./ClearButton.module.css\";\n\nconst ClearButton = ({ value, onClear }) => {\n  return (\n    <button className={classes.clear} onClick={onClear}>\n      {value}\n    </button>\n  );\n};\n\nexport default ClearButton;\n","import React, { Component } from \"react\";\nimport * as math from \"mathjs\";\nimport Display from \"../Display/Display\";\nimport Button from \"../Button/Button\";\nimport ClearButton from \"../ClearButton/ClearButton\";\n\nimport classes from \"./Calculator.module.css\";\n\nclass Calculator extends Component {\n  state = {\n    currentNumber: \"0\",\n    decimalFlag: false,\n    operatorFlag: false,\n    returned: false,\n  };\n\n  handleInput = (e) => {\n    if (this.state.currentNumber !== \"0\") {\n      if (!this.state.returned) {\n        this.setState({\n          currentNumber: this.state.currentNumber + e.value,\n          operatorFlag: false,\n          returned: false,\n        });\n      } else if (this.state.returned) {\n        this.setState({\n          currentNumber: \"\" + e.value,\n          operatorFlag: false,\n          returned: false,\n        });\n      }\n    } else {\n      let currentNumber = \"\" + e.value;\n      this.setState({ currentNumber, operatorFlag: false });\n    }\n  };\n\n  handleReturn = () => {\n    try {\n      this.setState({\n        currentNumber: String(math.evaluate(this.state.currentNumber)),\n        decimalFlag: false,\n        operatorFlag: false,\n        returned: true,\n      });\n    } catch (error) {\n      this.setState({\n        currentNumber: \"0\",\n        decimalFlag: false,\n        operatorFlag: false,\n        returned: false,\n      });\n    }\n  };\n\n  handleZero = (e) => {\n    //let pattern = /^0/;\n    if (\n      /*!pattern.test(this.state.currentNumber)*/ this.state.currentNumber !==\n      \"0\"\n    ) {\n      if (!this.state.returned) {\n        this.setState({\n          currentNumber: this.state.currentNumber + e.value,\n          operatorFlag: false,\n          returned: false,\n        });\n      } else if (this.state.returned) {\n        this.setState({\n          currentNumber: \"\" + e.value,\n          operatorFlag: false,\n          returned: false,\n        });\n      }\n    }\n  };\n\n  handleDecimal = (e) => {\n    if (!this.state.decimalFlag) {\n      if (!this.state.returned) {\n        this.setState({\n          currentNumber: this.state.currentNumber + e.value,\n          decimalFlag: true,\n          returned: false,\n        });\n      } else {\n        this.setState({\n          currentNumber: \"\" + e.value,\n          decimalFlag: true,\n          returned: false,\n        });\n      }\n    }\n  };\n\n  handleOperator = (e) => {\n    const { currentNumber } = this.state;\n    if (!this.state.operatorFlag) {\n      this.setState({\n        currentNumber: currentNumber + e.value,\n        decimalFlag: false,\n        operatorFlag: true,\n        returned: false,\n      });\n    } else {\n      let newNumber = currentNumber.slice(0, currentNumber.length - 1);\n      this.setState({\n        currentNumber: newNumber + e.value,\n        decimalFlag: false,\n        operatorFlag: true,\n        returned: false,\n      });\n    }\n  };\n\n  handleClear = () => {\n    this.setState({\n      currentNumber: \"0\",\n      decimalFlag: false,\n      operatorFlag: false,\n      returned: false,\n    });\n  };\n\n  render() {\n    return (\n      <div className={classes.container}>\n        <div className={classes.rowContainer}>\n          <Display value={this.state.currentNumber} />\n        </div>\n        <div className={classes.row}>\n          <Button value=\"1\" onInput={() => this.handleInput({ value: 1 })} />\n          <Button value=\"2\" onInput={() => this.handleInput({ value: 2 })} />\n          <Button value=\"3\" onInput={() => this.handleInput({ value: 3 })} />\n          <Button\n            value=\"+\"\n            onInput={() => this.handleOperator({ value: \"+\" })}\n          />\n        </div>\n        <div className={classes.row}>\n          <Button value=\"4\" onInput={() => this.handleInput({ value: 4 })} />\n          <Button value=\"5\" onInput={() => this.handleInput({ value: 5 })} />\n          <Button value=\"6\" onInput={() => this.handleInput({ value: 6 })} />\n          <Button\n            value=\"-\"\n            onInput={() => this.handleOperator({ value: \"-\" })}\n          />\n        </div>\n        <div className={classes.row}>\n          <Button value=\"7\" onInput={() => this.handleInput({ value: 7 })} />\n          <Button value=\"8\" onInput={() => this.handleInput({ value: 8 })} />\n          <Button value=\"9\" onInput={() => this.handleInput({ value: 9 })} />\n          <Button\n            value=\"x\"\n            onInput={() => this.handleOperator({ value: \"*\" })}\n          />\n        </div>\n        <div className={classes.row}>\n          <Button\n            value=\".\"\n            onInput={() => this.handleDecimal({ value: \".\" })}\n          />\n          <Button value=\"0\" onInput={() => this.handleZero({ value: 0 })} />\n          <Button value=\"=\" onInput={() => this.handleReturn({ value: \"=\" })} />\n          <Button\n            value=\"/\"\n            onInput={() => this.handleOperator({ value: \"/\" })}\n          />\n        </div>\n        <div className={classes.row}>\n          <ClearButton value=\"CLEAR\" onClear={() => this.handleClear()} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Calculator;\n","import React from \"react\";\nimport Calculator from \"../Calculator/Calculator\";\n\nconst App = () => {\n  return <Calculator />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Calculator_container__xi-tU\",\"row\":\"Calculator_row__2a8lt\",\"rowContainer\":\"Calculator_rowContainer__1ME7p\"};"],"sourceRoot":""}